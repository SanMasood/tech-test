{"version":3,"sources":["assets/nasa-icon-png-7.png","requests/getImages.js","components/Search.js","components/SearchResults.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","getImages","query","request","toLowerCase","axios","get","then","response","parsedImages","data","collection","items","filter","images","media_type","console","log","processedImages","map","image","url","links","href","title","catch","err","alert","Promise","resolve","Search","setSearchResults","useState","value","setValue","isLoading","setIsLoading","handleSubmit","event","a","preventDefault","className","onSubmit","type","onChange","e","target","color","height","width","timeout","SearchResults","searchResults","key","src","alt","App","logoImage","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,6C,kNCuC5BC,EArCG,SAACC,GACf,GAAKA,EAID,CACA,IAAMC,EAAUD,EAAME,cAEtB,OAAOC,IACNC,IAAI,wCAAwCH,GAC5CI,MAAK,SAACC,GAGH,IAEIC,EAFeD,EAASE,KAAKC,WAAWC,MAEZC,QAAO,SAACC,GAAD,MAAuC,UAA5BA,EAAOJ,KAAK,GAAGK,cAEjEC,QAAQC,IAAIR,GACZ,IAAMS,EAAkBT,EAAaU,KAAI,SAAAC,GAErC,MAAM,CACFC,IAAKD,EAAME,MAAM,GAAGC,KACpBC,MAAOJ,EAAMV,KAAK,GAAGc,UAM7B,OAFAR,QAAQC,IAAIC,GAELA,KAIVO,OAAM,SAACC,GACJC,MAAM,wDA/BV,OAAOC,QAAQC,QAAQ,K,iBCkDhBC,G,YA5CA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAAuB,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAEHF,oBAAS,GAFN,mBAE9BG,EAF8B,KAEnBC,EAFmB,KAK/BC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACjBH,GAAa,GACbE,EAAME,iBAFW,KAGjBT,EAHiB,SAGM9B,EAAUgC,GAHhB,kCAIjBG,GAAa,GAJI,2CAAH,sDAMtB,OAEI,yBAAKK,UAAU,UAEX,0BAAMA,UAAU,aAAaC,SAAUL,GACnC,yCACJ,2BAAOI,UAAU,cAAcE,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKX,EAASW,EAAEC,OAAOb,WAG5E,4BAAQU,KAAK,SAASF,UAAU,iBAAhC,OAIAN,GACA,kBAAC,IAAD,CACCQ,KAAK,YACLI,MAAM,MACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,SCHHC,G,MAhCO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAIzB,OAFIpC,QAAQC,IAAI,SAIZ,yBAAKwB,UAAU,iBACX,yBAAKA,UAAU,QAEPW,EAAcjC,KAAI,SAACC,GACnB,OACA,yBAAKiC,IAAOjC,EAAMC,IAAKoB,UAAU,qBACjC,yBAAKa,IAAKlC,EAAMC,IAAKkC,IAAK,UAAUd,UAAU,eAE9C,gCAAYA,UAAU,WAAWrB,EAAMI,e,uBCiBxCgC,MA1Bf,WAAgB,IAAD,EAC6BxB,mBAAS,MADtC,mBACNoB,EADM,KACSrB,EADT,KAKb,OACE,yBAAKU,UAAU,OACZ,yBAAKa,IAAKG,IAAWC,cAAY,UAAUjB,UAAU,YAAYc,IAAI,aAEpE,kBAAC,EAAD,CAAQxB,iBAAqBA,IAE7B,yBAAKU,UAAU,kBAGXW,EACA,kBAAC,EAAD,CAAeA,cAAiBA,IAEjC,6BAAK,wBAAIX,UAAU,gBAAd,uBCfIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.9e5abc2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nasa-icon-png-7.c51d00ea.png\";","import axios from 'axios';\n\nconst getImages = (query) => {\n    if (!query){\n        return Promise.resolve([]);           \n            \n    }\n    else{\n        const request = query.toLowerCase(); \n\n        return axios\n        .get(`https://images-api.nasa.gov/search?q=`+request)\n        .then((response)=>{\n            \n\n            let imageResults = response.data.collection.items;\n            \n            let parsedImages = imageResults.filter((images)=> images.data[0].media_type===\"image\");\n\n            console.log(parsedImages);\n            const processedImages = parsedImages.map(image => { \n\n                return{  \n                    url: image.links[0].href, \n                    title: image.data[0].title\n                }\n            });\n            \n            console.log(processedImages);\n            \n            return processedImages;\n           \n\n        })\n        .catch((err)=>{\n            alert(\"Something went wrong. Please refresh your browser\");       \n        });        \n    }\n}\nexport default getImages;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport getImages from '../requests/getImages';\nimport Loader from 'react-loader-spinner'\n\nimport '../styles/Search.css'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\n\n\nconst Search = ({ setSearchResults }) => {\n    const [value, setValue] = useState('');\n    const [isLoading, setIsLoading] = useState(false); \n\n\n    const handleSubmit = async (event) => {\n        setIsLoading(true);\n        event.preventDefault();//stops browser reloading\n        setSearchResults(await getImages(value));\n        setIsLoading(false);\n    }\nreturn (\n      \n    <div className=\"Search\">      \n\n        <form className=\"input-form\" onSubmit={handleSubmit}>\n            <label>Search:\n        <input className=\"search-text\" type=\"text\" onChange={(e)=>setValue(e.target.value)}/>\n        </label>\n\n        <button type=\"submit\" className=\"search-button\">Go</button>\n\n        </form>\n        {\n        isLoading && \n        <Loader\n         type=\"ThreeDots\"\n         color=\"red\"\n         height={60}\n         width={60}\n         timeout={7000}\n        />\n        \n        }      \n        \n    </div>\n);\n}\n\n\nSearch.propTypes = {\n    setSearchResults: PropTypes.func,\n}\n\nexport default Search;","import React from 'react';\nimport '../styles/SearchResults.css';\nimport PropTypes from 'prop-types';\n//import { returned } from '../requests/getImages'\n\nconst SearchResults = ( {searchResults} ) => {\n    //console.log(returned);\n    console.log(\"Hello\")\n\nreturn (   \n\n    <div className=\"SearchResults\">\n        <div className=\"test\">\n            {\n                searchResults.map((image) => {\n                return (\n                <div key = {image.url} className=\"innerSearchResult\">\n                <img src={image.url} alt= \"mockAlt\" className=\"card-photo\" />\n                \n                <figcaption className=\"caption\">{image.title}</figcaption>\n                </div>\n\n                )\n            })\n        }\n                 \n        </div>\n    \n    </div>\n\n)\n    \n}\nSearchResults.propTypes = {\n    searchResults: PropTypes.array.isRequired,\n}\n\nexport default SearchResults;","import React, { useState } from 'react';\n\nimport Search from './Search';\nimport SearchResults from './SearchResults';\nimport logoImage from '../assets/nasa-icon-png-7.png'\n\nimport '../styles/App.css';\nimport '../styles/Search.css'\nimport '../styles/SearchResults.css'\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState(null);\n  //searchResults.map((e)=> console.log(e));  \n\n\n  return (\n    <div className=\"App\">\n       <img src={logoImage} data-testid=\"logo-id\" className=\"nasa-logo\" alt=\"NASAlogo\"/>\n       \n        <Search setSearchResults = { setSearchResults }/>\n\n        <div className=\"search-results\">\n          {\n                   \n           (searchResults)? \n            <SearchResults searchResults = {searchResults} /> :\n           \n           <div><h2 className=\"results-text\">No results yet.</h2></div>              \n           \n          }\n        </div>\n       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}